<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <style>
        * {
            margin: 0;
            padding: 2px;
            box-sizing: border-box;
        }

        #videos {
            display: grid;
            grid-template-columns: 1fr;
            height: 100vh;
            overflow: hidden;
        }

        .video-player {
            background-color: black;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .smallFrame {
            position: fixed;
            bottom: 100px;
            right: 20px;
            height: 170px;
            width: 300px;
            border-radius: 6px;
            z-index: 10;
        }

        #controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 1em;
            padding: 1rem;
        }

        .control-container {
            background-color: #6df966;
            padding: 20px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }

        .control-container svg {
            height: 30px;
            width: 30px;
        }

        #leave-btn {
            background-color: rgb(255, 80, 80, 1);
        }
       #typing-indicator {
    font-style: italic;
    color: #6B7280;
    margin-bottom: 0.5rem;
    animation: fadeInOut 1s ease-in-out infinite alternate;
}


        

        @media screen and (max-width: 600px) {
            .smallFrame {
                height: 80px;
                width: 120px;
            }

            .control-container img {
                height: 20px;
                width: 20px;
            }
        }
    </style>
    <link href="/css/style.css" rel="stylesheet">
</head>

<body class="flex flex-col h-dvh bg-gray-200 p-4 gap-4">
    <%- include('partials/header') %>

    <div class="fixed videoblock hidden z-[222] w-full h-svh p-4">
        <div id="videos">
            <video class="video-player" id="localVideo" autoplay muted playsinline></video>
            <video class="video-player" id="remoteVideo" autoplay playsinline></video>
        </div>

        <div id="controls">
            <div class="control-container" id="cameraButton">üì∑</div>
            <div class="control-container" id="hangup">‚ùå</div>
            <div class="control-container" id="micButton">üé§</div>
        </div>
    </div>

    <div id="incoming-call"
        class="fixed hidden z-[222] w-full h-dvh bg-gray-900 bg-opacity-75 flex items-center justify-center p-4">
        <div class="bg-white p-8 rounded-md text-center space-y-4">
            <p class=" py-3 px-6 text-lg font-medium">Incoming Call...</p>
            <button id="accept-call" class="bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600">Accept</button>
            <button id="reject-call" class="bg-red-500 text-white py-2 px-4 rounded-md hover:bg-red-600 ml-2">Reject</button>
        </div>
    </div>

    <main class="flex-1 p-4 overflow-y-auto relative" id="message-container">
        <div class="text-zinc-400 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-2/3 text-center nobody">
            bhagwaan kasam koi nahi hai yaha, ruko shaayad koi aajaye.
        </div>
    </main>

    <div id="typing-indicator" style="display:none;" class="text-gray-500 italic mb-2">User is typing...</div>

    <form id="chatform" class="bg-white p-6 flex gap-4">
        <input type="hidden" id="userid" value="">
        <input type="text" id="messagebox"
            class="flex-1 border border-gray-300 rounded-md px-6 py-4 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            placeholder="Type a message...">
        <button type="submit"
            class="bg-indigo-600 text-white py-3 px-8 rounded-md hover:bg-indigo-700">Send</button>
    </form>

    <video id="local-video" class="hidden" autoplay></video>
    <video id="remote-video" class="hidden" autoplay></video>

    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"
        integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
        crossorigin="anonymous"></script>

    <script>
        const socket = io();
        const chatform = document.querySelector("#chatform");
        const messagebox = document.querySelector("#messagebox");
        let room;
        const messagecontainer = document.querySelector("#message-container");

        socket.emit("joinroom");

        socket.on("joined", function (roomname) {
            room = roomname;
            document.querySelector(".nobody").classList.add("hidden");
        });

        socket.on("message", function (message) {
            receiveMessage(message);
        });

        chatform.addEventListener("submit", function (event) {
            event.preventDefault();
            socket.emit("message", { room: room, message: messagebox.value });
            attachMessage(messagebox.value);
            messagebox.value = "";
             document.getElementById('typing-indicator').style.display = 'none';
        });

        function attachMessage(message) {
            const userMessageContainer = document.createElement('div');
            userMessageContainer.classList.add('flex', 'my-2', 'justify-end');
            const userMessageDiv = document.createElement('div');
            userMessageDiv.classList.add('bg-blue-500', 'text-white', 'p-3', 'rounded-lg', 'max-w-xs');
            const userMessageText = document.createElement('p');
            userMessageText.textContent = message;
            userMessageDiv.appendChild(userMessageText);
            userMessageContainer.appendChild(userMessageDiv);
            messagecontainer.appendChild(userMessageContainer);
            messagecontainer.scrollTop = messagecontainer.scrollHeight;
        }

        function receiveMessage(message) {
            const messageContainer = document.createElement('div');
            messageContainer.classList.add('flex', 'my-2', 'justify-start');
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('bg-gray-300', 'text-gray-800', 'p-3', 'rounded-lg', 'max-w-xs');
            const messageText = document.createElement('p');
            messageText.textContent = message;
            messageDiv.appendChild(messageText);
            messageContainer.appendChild(messageDiv);
            messagecontainer.appendChild(messageContainer);
            messagecontainer.scrollTop = messagecontainer.scrollHeight;
        }
        //typing...
        messagebox.addEventListener('input', () => {
        socket.emit('typing', { room });
         });
         socket.on('userTyping', () => {
    showTypingIndicator();
});

function showTypingIndicator() {
    const typingEl = document.getElementById('typing-indicator');
    typingEl.style.display = 'block';

    clearTimeout(typingEl.timeout);
    typingEl.timeout = setTimeout(() => {
        typingEl.style.display = 'none';
    }, 500);
}


  

        //WebRTC
        let localStream;
        let remoteStream;
        let peerConnection;
        let inCall = false;

        const rtcSettings = {
    iceServers: [
        { urls: "stun:stun.l.google.com:19302" },
        {
            urls: "turn:relay.example.com:3478",
            username: "user",
            credential: "pass"
        }
    ]
};

        const initialize = async (isCaller = false) => {
    if (!localStream) {
        try {
            localStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
            document.querySelector("#localVideo").srcObject = localStream;
            document.querySelector("#localVideo").style.display = "block";
        } catch (err) {
            console.log("Rejected by browser: " + err);
            return;
        }
    }

    createPeerConnection();

    if (isCaller) {
        initiateOffer();
    }

    inCall = true;
};


        const initiateOffer = async () => {
            try {
                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "offer", offer }) });
            } catch (err) {
                console.log("Error in creating offer: " + err);
            }
        };

        const createPeerConnection = () => {
    if (peerConnection) return;  // prevent duplicate connections

    peerConnection = new RTCPeerConnection(rtcSettings);
    document.querySelector("#localVideo").classList.add("smallFrame");

    localStream.getTracks().forEach(track => {
        peerConnection.addTrack(track, localStream);
    });

    remoteStream = new MediaStream();
    const remoteVideo = document.querySelector("#remoteVideo");
    remoteVideo.srcObject = remoteStream;
    remoteVideo.style.display = "block";
    remoteVideo.muted = false;

    peerConnection.ontrack = (event) => {
        console.log("Remote track received", event.streams);
        event.streams[0].getTracks().forEach(track => {
            remoteStream.addTrack(track);
        });
    };

    peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            console.log("Sending ICE candidate", event.candidate);
            socket.emit("signalingMessage", { 
                room, 
                message: JSON.stringify({ type: "candidate", candidate: event.candidate }) 
            });
        }
    };

    peerConnection.onconnectionstatechange = () => {
        console.log("Connection state changed to:", peerConnection.connectionState);
    };
};

const handleOffer = async (offer) => {
    console.log("Handling offer", offer);
    if (!peerConnection) createPeerConnection();
    if (!localStream) {
        try {
            localStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
            document.querySelector("#localVideo").srcObject = localStream;
            document.querySelector("#localVideo").style.display = "block";
        } catch (err) {
            console.error("Rejected by browser: ", err);
            return;
        }
    }
    try {
        await peerConnection.setRemoteDescription(offer);
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "answer", answer }) });
        inCall = true;
    } catch (err) {
        console.error("Failed to handle offer:", err);
    }
};

const handleAnswer = async (answer) => {
    console.log("Handling answer", answer);
    if (!peerConnection) {
        console.error("peerConnection is null on handleAnswer");
        return;
    }
    try {
        await peerConnection.setRemoteDescription(answer);
    } catch (err) {
        console.error("Failed to handle answer:", err);
    }
};

const handleSignalingMessage = async (message) => {
    console.log("Signaling message received:", message);
    const { type, offer, answer, candidate } = JSON.parse(message);
    switch (type) {
        case "offer":
            await handleOffer(offer);
            break;
        case "answer":
            await handleAnswer(answer);
            break;
        case "candidate":
            if (peerConnection && candidate) {
                try {
                    console.log("Adding ICE candidate", candidate);
                    await peerConnection.addIceCandidate(candidate);
                } catch (err) {
                    console.error("Failed to add ICE candidate", err);
                }
            }
            break;
        case "hangup":
            hangup();
            break;
    }
};


        document.querySelector("#video-call-btn").addEventListener("click", () => {
            socket.emit("startVideoCall", { room });
        });

        socket.on("incomingCall", () => {
            document.querySelector("#incoming-call").classList.remove("hidden");
        });

        socket.on("callAccepted", () => {
    initialize(true);  // initiator makes offer
    document.querySelector(".videoblock").classList.remove("hidden");
});

document.querySelector("#accept-call").addEventListener("click", () => {
    document.querySelector("#incoming-call").classList.add("hidden");
    initialize(false);  // receiver just waits for offer
    document.querySelector(".videoblock").classList.remove("hidden");
    socket.emit("acceptCall", { room });
});


        document.querySelector("#reject-call").addEventListener("click", () => {
            document.querySelector("#incoming-call").classList.add("hidden");
            socket.emit("rejectCall", { room });
        });

        socket.on("callRejected", () => {
            alert("Call rejected by the other user");
        });

        document.querySelector("#hangup").addEventListener("click", () => {
            hangup();
        });

        function hangup() {
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localStream = null;
            }
            if (remoteStream) {
                remoteStream.getTracks().forEach(track => track.stop());
                remoteStream = null;
            }
            document.querySelector("#localVideo").srcObject = null;
            document.querySelector("#remoteVideo").srcObject = null;
            document.querySelector(".videoblock").classList.add("hidden");
            if (inCall) {
                socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "hangup" }) });
                inCall = false;
            }
        }

        socket.on("signalingMessage", handleSignalingMessage);

        const cameraButton = document.querySelector("#cameraButton");
let videoEnabled = true;

cameraButton.addEventListener("click", () => {
    if (!localStream) return;

    const videoTrack = localStream.getVideoTracks()[0];
    if (videoTrack) {
        videoEnabled = !videoEnabled;
        videoTrack.enabled = videoEnabled;
        cameraButton.textContent = videoEnabled ? "üì∑" : "‚ùåüì∑";
    }
});


const micButton = document.querySelector("#micButton");
let micEnabled = true;

micButton.addEventListener("click", () => {
    if (!localStream) return;

    const audioTrack = localStream.getAudioTracks()[0];
    if (audioTrack) {
        micEnabled = !micEnabled;
        audioTrack.enabled = micEnabled;
        micButton.textContent = micEnabled ? "üé§" : "‚ùåüé§";
    }
});

    </script>

</body>

</html>
